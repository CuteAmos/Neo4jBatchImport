<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">

	<!--设置变量，name为变量名，value为值，可以使用${变量名}方式使用-->
	<property name="APPDIR" value="log" />
	<property name="LOG_HOME" value="/nas03backup/neo4j/logs/importgroup/" />
	<property name="APPNAME" value="app_test" />
	<property name="MDC_LOG_PATTERN"
			  value="%d{yyyy-MM-dd'T'HH:mm:ss.SSS} %p app_test %t %logger{50} line:%L %msg]%n"></property>


	<!-- 性能日志记录器，日期滚动记录 -->
	<!--当一个记录日志的事件被发起时，logback 会将这个事件发送给 appender-->
	<!--RollingFileAppender，滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
	<appender name="branchAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/branch/branch_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/branch/branch_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="companyAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/company/company_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/company/company_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="companyNeAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/companyne/companyne_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/companyne/companyne_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="companyGroupAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/companygroup/companygroup_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/companygroup/companygroup_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="investAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/invest/invest_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/invest/invest_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="keypersonAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/keyperson/keyperson_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/keyperson/keyperson_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="personAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/person/person_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/person/person_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="person1Appender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/person1/person1_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/person1/person1_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="nshareAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/nshare/nshare_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/nshare/nshare_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="shareAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/share/share_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/share/share_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="relationAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/relation/relation_update.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/relation/relation_update-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="errorConsoleAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/error/error.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/error/error-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>


	<appender name="debugConsoleAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/debug/debug.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<!--TimeBasedRollingPolicy 实现的是基于时间的分包策略，分包间隔是根据fileNamePattern中指定的事件最小单位-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2018-12-19日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                        而2018-12-01的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_HOME}/debug/debug-%d{yyyyMMdd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50Mb，若超过50Mb，日志文件会以索引0开始，  命名日志文件，例如app_test-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!--最大50mb-->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式和编码 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志文件只记录info级别的-->
		<!--filter是日志过滤器-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤级别-->
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>


	<!-- 运行日志记录器，日期滚动记录 -->
	<appender name="bizAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${LOG_HOME}/all/all.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录-->

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

			<fileNamePattern>${LOG_HOME}/all/all-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过50M，若超过50M，日志文件会以索引0开始，  命名日志文件，例如bizlog-biz-20181219.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize>
				<!--保存时间3天-->
				<!--<MaxHistory>3</MaxHistory>-->
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy/MM/dd' 'HH:mm:ss.SSS} %X{req.requestId}[line:%L %msg] %n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!-- 此日志文件只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<level>error</level>
			<!--<onMatch>ACCEPT</onMatch>-->
			<!--<onMismatch>DENY</onMismatch>-->
		</filter>
	</appender>

	<!--ConsoleAppender是打印到控制台的-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!--encoder 默认配置为PatternLayoutEncoder-->
		<encoder>
			<pattern>${MDC_LOG_PATTERN}</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>all</level>
		</filter>
	</appender>

	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="branch" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="branchAppender" />

	</logger>

	<logger name="errorConsole" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="errorConsoleAppender" />
	</logger>

	<logger name="debugConsole" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="debugConsoleAppender" />
	</logger>

	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="company" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="companyAppender" />

	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="relation" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="relationAppender" />

	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="companyne" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="companyNeAppender" />

	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="companygroup" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="companyGroupAppender" />
	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="invest" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="investAppender" />

	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="keyperson" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="keypersonAppender" />

	</logger>
	<logger name="person1" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="person1Appender" />

	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="person" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="personAppender" />

	</logger>
	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="nshare" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="nshareAppender" />

	</logger>

	<!--使用LoggerFactory.getLogger("performanceLogger") 使用这个logger-->
	<logger name="share" additivity="false">
		<!--使用哪一个Appender-->
		<appender-ref ref="shareAppender" />

	</logger>
	<!--根loger。只有一个level属性，应为已经被命名为"root".-->
	<root level="info">
		<appender-ref ref="bizAppender" />
		<appender-ref ref="STDOUT" />
	</root>

</configuration>
